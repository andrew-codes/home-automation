apiVersion: apps/v1
kind: Deployment
metadata:
  name: captive-portal
  namespace: default
  labels:
    app.kubernetes.io/name: captive-portal
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: captive-portal
  template:
    metadata:
      labels:
        app.kubernetes.io/name: captive-portal
      annotations:
        vault.hashicorp.com/agent-inject: 'true'
        vault.hashicorp.com/role: app
        vault.hashicorp.com/agent-inject-status: update
        vault.hashicorp.com/agent-inject-secret-env.sh: kv/home-assistant
        vault.hashicorp.com/agent-inject-template-env.sh: |
          {{ with secret "kv/mqtt" }}
          export MQTT_USERNAME="{{ .Data.USERNAME }}"
          export MQTT_PASSWORD="{{ .Data.PASSWORD }}"
          export MQTT_HOST="mqtt"
          {{ end }}
          {{ with secret "kv/unifi" }}
          export UNIFI_IP="{{ .Data.IP }}"
          export UNIFI_PORT="{{ .Data.PORT }}"
          export UNIFI_USERNAME="{{ .Data.USERNAME }}"
          export UNIFI_PASSWORD="{{ .Data.PASSWORD }}"
          {{ end }}
    spec:
      serviceAccountName: app
      imagePullSecrets:
        - name: regcred
      initContainers:
        - name: mqtt-is-ready
          image: docker-registry:5000/mqtt-client:latest
          imagePullPolicy: Always
          command:
            - "sh"
          args:
            - "-c"
            - "timeout 10 sub -h mqtt -t '$SYS/#' -C 1 | grep -v Error || exit 1"
        - name: home-assistant-is-ready
          image: curlimages/curl:latest
          command:
            - "sh"
          args:
            - "-c"
            - "timeout 10 curl --fail --insecure --silent --output /dev/null --write-out 'HTTP Code %{http_code}' 'http://home-assistant:8123' || exit 1"
      containers:
        - name: captive-portal
          image: docker-registry:5000/captive-portal:latest
          imagePullPolicy: Always
          command:
            - sh
          args:
            - "-c"
            - "source /secrets/vault/env.sh && /app/entrypoint.sh"
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          env:
            - name: PORT
              value: "80"
            - name: DEBUG

