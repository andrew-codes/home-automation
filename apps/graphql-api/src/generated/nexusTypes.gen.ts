/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import { DataContext as ctx } from "./../dataContext"
import { GameImage, GamePlayerPerspective, GamePlatform, GameKeyword, GameGenre, GameMode, GameCollection, GameFranchise, GameMultiplayerMode, GameEntity, HomeAssistantEntity, EntityDomain } from "./../Domain"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  InputEntities: { // input type
    items?: Array<NexusGenInputs['InputEntity'] | null> | null; // [InputEntity]
  }
  InputEntity: { // input type
    area_id?: string | null; // String
    domain_id?: string | null; // String
    id?: string | null; // String
    name?: string | null; // String
  }
  InputServiceCall: { // input type
    id?: string | null; // String
    payload?: Array<NexusGenInputs['InputServiceCallPayload'] | null> | null; // [InputServiceCallPayload]
    service?: string | null; // String
  }
  InputServiceCallPayload: { // input type
    key?: string | null; // String
    value?: string | null; // String
  }
  OrderByArg: { // input type
    name?: NexusGenEnums['OrderByType'] | null; // OrderByType
    releaseYear?: NexusGenEnums['OrderByType'] | null; // OrderByType
  }
}

export interface NexusGenEnums {
  OrderByType: 1 | -1
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Game: GameEntity;
  GameCollection: GameCollection;
  GameFranchise: GameFranchise;
  GameGenre: GameGenre;
  GameImage: GameImage;
  GameKeyword: GameKeyword;
  GameMode: GameMode;
  GameMultiplayerMode: GameMultiplayerMode;
  GamePlatform: GamePlatform;
  GamePlayerPerspective: GamePlayerPerspective;
  HomeAssistantArea: { // root type
    id?: string | null; // ID
    name?: string | null; // String
  }
  HomeAssistantDomain: EntityDomain;
  HomeAssistantEntity: HomeAssistantEntity;
  Mutation: {};
  Query: {};
  Subscription: {};
  UpdatedAt: { // root type
    updatedAt?: string | null; // String
  }
}

export interface NexusGenInterfaces {
  Node: NexusGenRootTypes['HomeAssistantDomain'];
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenInterfaces & NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Game: { // field return type
    artworks: Array<NexusGenRootTypes['GameImage'] | null> | null; // [GameImage]
    collection: NexusGenRootTypes['GameCollection'] | null; // GameCollection
    cover: NexusGenRootTypes['GameImage'] | null; // GameImage
    favorite: boolean | null; // Boolean
    franchise: NexusGenRootTypes['GameFranchise'] | null; // GameFranchise
    franchises: Array<NexusGenRootTypes['GameFranchise'] | null> | null; // [GameFranchise]
    gameModes: Array<NexusGenRootTypes['GameMode'] | null> | null; // [GameMode]
    genres: Array<NexusGenRootTypes['GameGenre'] | null> | null; // [GameGenre]
    hidden: boolean | null; // Boolean
    id: string | null; // ID
    keywords: Array<NexusGenRootTypes['GameKeyword'] | null> | null; // [GameKeyword]
    multiplayerModes: Array<NexusGenRootTypes['GameMultiplayerMode'] | null> | null; // [GameMultiplayerMode]
    name: string | null; // String
    platform: NexusGenRootTypes['GamePlatform'] | null; // GamePlatform
    playerPerspective: NexusGenRootTypes['GamePlayerPerspective'] | null; // GamePlayerPerspective
    playniteId: string | null; // String
    playtime: number | null; // Int
    releaseYear: number | null; // Int
    slug: string | null; // String
    source: string | null; // String
    state: string | null; // String
    summary: string | null; // String
  }
  GameCollection: { // field return type
    games: Array<NexusGenRootTypes['Game'] | null> | null; // [Game]
    id: string | null; // ID
    name: string | null; // String
    slug: string | null; // String
  }
  GameFranchise: { // field return type
    games: Array<NexusGenRootTypes['Game'] | null> | null; // [Game]
    id: string | null; // ID
    name: string | null; // String
    slug: string | null; // String
  }
  GameGenre: { // field return type
    games: Array<NexusGenRootTypes['Game'] | null> | null; // [Game]
    id: string | null; // ID
    name: string | null; // String
    slug: string | null; // String
  }
  GameImage: { // field return type
    height: number | null; // Int
    id: string | null; // ID
    imageId: string | null; // String
    url: string | null; // String
  }
  GameKeyword: { // field return type
    games: Array<NexusGenRootTypes['Game'] | null> | null; // [Game]
    id: string | null; // ID
    name: string | null; // String
    slug: string | null; // String
  }
  GameMode: { // field return type
    games: Array<NexusGenRootTypes['Game'] | null> | null; // [Game]
    id: string | null; // ID
    name: string | null; // String
    slug: string | null; // String
  }
  GameMultiplayerMode: { // field return type
    campaigncoop: boolean | null; // Boolean
    dropIn: boolean | null; // Boolean
    id: string | null; // ID
    lancoop: boolean | null; // Boolean
    offlinecoop: boolean | null; // Boolean
    offlinecoopmax: number | null; // Int
    offlinemax: number | null; // Int
    onlinecoop: boolean | null; // Boolean
    onlinecoopmax: number | null; // Int
    onlinemax: number | null; // Int
    splitscreen: boolean | null; // Boolean
  }
  GamePlatform: { // field return type
    games: Array<NexusGenRootTypes['Game'] | null> | null; // [Game]
    id: string | null; // ID
    name: string | null; // String
  }
  GamePlayerPerspective: { // field return type
    id: string | null; // ID
    name: string | null; // String
    slug: string | null; // String
  }
  HomeAssistantArea: { // field return type
    entities: Array<NexusGenRootTypes['HomeAssistantEntity'] | null> | null; // [HomeAssistantEntity]
    id: string | null; // ID
    name: string | null; // String
  }
  HomeAssistantDomain: { // field return type
    entities: Array<NexusGenRootTypes['HomeAssistantEntity'] | null> | null; // [HomeAssistantEntity]
    id: string | null; // ID
  }
  HomeAssistantEntity: { // field return type
    area: NexusGenRootTypes['HomeAssistantArea'] | null; // HomeAssistantArea
    domain: NexusGenRootTypes['HomeAssistantDomain'] | null; // HomeAssistantDomain
    id: string | null; // ID
    name: string | null; // String
  }
  Mutation: { // field return type
    homeAssistantCallService: NexusGenRootTypes['HomeAssistantEntity'] | null; // HomeAssistantEntity
    playGameInGameRoom: NexusGenRootTypes['Game'] | null; // Game
    renewGuestDevices: Array<NexusGenRootTypes['HomeAssistantEntity'] | null> | null; // [HomeAssistantEntity]
    stopGameInGameRoom: NexusGenRootTypes['Game'] | null; // Game
    trackGuestDevice: NexusGenRootTypes['HomeAssistantEntity'] | null; // HomeAssistantEntity
  }
  Query: { // field return type
    area: Array<NexusGenRootTypes['HomeAssistantArea'] | null> | null; // [HomeAssistantArea]
    domain: Array<NexusGenRootTypes['HomeAssistantDomain'] | null> | null; // [HomeAssistantDomain]
    entitiy: Array<NexusGenRootTypes['HomeAssistantEntity'] | null> | null; // [HomeAssistantEntity]
    game: Array<NexusGenRootTypes['Game'] | null> | null; // [Game]
    gameFranchise: Array<NexusGenRootTypes['GameFranchise'] | null> | null; // [GameFranchise]
    gameGenre: Array<NexusGenRootTypes['GameGenre'] | null> | null; // [GameGenre]
    gameKeyword: Array<NexusGenRootTypes['GameKeyword'] | null> | null; // [GameKeyword]
    gameMode: Array<NexusGenRootTypes['GameMode'] | null> | null; // [GameMode]
    gamePlatform: Array<NexusGenRootTypes['GamePlatform'] | null> | null; // [GamePlatform]
  }
  Subscription: { // field return type
    gameLibrary: NexusGenRootTypes['UpdatedAt'] | null; // UpdatedAt
    gameState: NexusGenRootTypes['Game'] | null; // Game
  }
  UpdatedAt: { // field return type
    updatedAt: string | null; // String
  }
  Node: { // field return type
    id: string | null; // ID
  }
}

export interface NexusGenFieldTypeNames {
  Game: { // field return type name
    artworks: 'GameImage'
    collection: 'GameCollection'
    cover: 'GameImage'
    favorite: 'Boolean'
    franchise: 'GameFranchise'
    franchises: 'GameFranchise'
    gameModes: 'GameMode'
    genres: 'GameGenre'
    hidden: 'Boolean'
    id: 'ID'
    keywords: 'GameKeyword'
    multiplayerModes: 'GameMultiplayerMode'
    name: 'String'
    platform: 'GamePlatform'
    playerPerspective: 'GamePlayerPerspective'
    playniteId: 'String'
    playtime: 'Int'
    releaseYear: 'Int'
    slug: 'String'
    source: 'String'
    state: 'String'
    summary: 'String'
  }
  GameCollection: { // field return type name
    games: 'Game'
    id: 'ID'
    name: 'String'
    slug: 'String'
  }
  GameFranchise: { // field return type name
    games: 'Game'
    id: 'ID'
    name: 'String'
    slug: 'String'
  }
  GameGenre: { // field return type name
    games: 'Game'
    id: 'ID'
    name: 'String'
    slug: 'String'
  }
  GameImage: { // field return type name
    height: 'Int'
    id: 'ID'
    imageId: 'String'
    url: 'String'
  }
  GameKeyword: { // field return type name
    games: 'Game'
    id: 'ID'
    name: 'String'
    slug: 'String'
  }
  GameMode: { // field return type name
    games: 'Game'
    id: 'ID'
    name: 'String'
    slug: 'String'
  }
  GameMultiplayerMode: { // field return type name
    campaigncoop: 'Boolean'
    dropIn: 'Boolean'
    id: 'ID'
    lancoop: 'Boolean'
    offlinecoop: 'Boolean'
    offlinecoopmax: 'Int'
    offlinemax: 'Int'
    onlinecoop: 'Boolean'
    onlinecoopmax: 'Int'
    onlinemax: 'Int'
    splitscreen: 'Boolean'
  }
  GamePlatform: { // field return type name
    games: 'Game'
    id: 'ID'
    name: 'String'
  }
  GamePlayerPerspective: { // field return type name
    id: 'ID'
    name: 'String'
    slug: 'String'
  }
  HomeAssistantArea: { // field return type name
    entities: 'HomeAssistantEntity'
    id: 'ID'
    name: 'String'
  }
  HomeAssistantDomain: { // field return type name
    entities: 'HomeAssistantEntity'
    id: 'ID'
  }
  HomeAssistantEntity: { // field return type name
    area: 'HomeAssistantArea'
    domain: 'HomeAssistantDomain'
    id: 'ID'
    name: 'String'
  }
  Mutation: { // field return type name
    homeAssistantCallService: 'HomeAssistantEntity'
    playGameInGameRoom: 'Game'
    renewGuestDevices: 'HomeAssistantEntity'
    stopGameInGameRoom: 'Game'
    trackGuestDevice: 'HomeAssistantEntity'
  }
  Query: { // field return type name
    area: 'HomeAssistantArea'
    domain: 'HomeAssistantDomain'
    entitiy: 'HomeAssistantEntity'
    game: 'Game'
    gameFranchise: 'GameFranchise'
    gameGenre: 'GameGenre'
    gameKeyword: 'GameKeyword'
    gameMode: 'GameMode'
    gamePlatform: 'GamePlatform'
  }
  Subscription: { // field return type name
    gameLibrary: 'UpdatedAt'
    gameState: 'Game'
  }
  UpdatedAt: { // field return type name
    updatedAt: 'String'
  }
  Node: { // field return type name
    id: 'ID'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    homeAssistantCallService: { // args
      entity?: NexusGenInputs['InputServiceCall'] | null; // InputServiceCall
    }
    playGameInGameRoom: { // args
      id?: string | null; // String
      platformName?: string | null; // String
    }
    trackGuestDevice: { // args
      isPrimary?: boolean | null; // Boolean
      mac?: string | null; // String
    }
  }
  Query: {
    area: { // args
      ids?: Array<string | null> | null; // [String]
    }
    domain: { // args
      ids?: Array<string | null> | null; // [String]
    }
    entitiy: { // args
      ids?: Array<string | null> | null; // [String]
    }
    game: { // args
      ids?: Array<string | null> | null; // [String]
      orderBy?: NexusGenInputs['OrderByArg'] | null; // OrderByArg
    }
    gameFranchise: { // args
      ids?: Array<string | null> | null; // [String]
    }
    gameGenre: { // args
      ids?: Array<string | null> | null; // [String]
    }
    gameKeyword: { // args
      ids?: Array<string | null> | null; // [String]
    }
    gameMode: { // args
      ids?: Array<string | null> | null; // [String]
    }
    gamePlatform: { // args
      ids?: Array<string | null> | null; // [String]
    }
  }
}

export interface NexusGenAbstractTypeMembers {
  Node: "HomeAssistantDomain"
}

export interface NexusGenTypeInterfaces {
  HomeAssistantDomain: "Node"
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = keyof NexusGenInterfaces;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = "Node";

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: ctx;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * The nullability guard can be helpful, but is also a potentially expensive operation for lists.
     * We need to iterate the entire list to check for null items to guard against. Set this to true
     * to skip the null guard on a specific field if you know there's no potential for unsafe types.
     */
    skipNullGuard?: boolean
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}