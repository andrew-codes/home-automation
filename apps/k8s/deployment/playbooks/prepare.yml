---
- name: Prepare for Kubernetes
  hosts: all
  become: true
  become_method: ansible.builtin.sudo
  become_user: root
  gather_facts: true
  connection: ssh
  vars_files:
    - ../../.secrets/ansible-secrets.yml

  tasks:
    - name: Install sudo
      apt:
        name:
          - sudo
        state: present

    - name: Allow user to have sudo
      lineinfile:
        dest: /etc/sudoers
        line: "{{ ansible_user }} ALL=(ALL) ALL"
        validate: "visudo -cf %s"

    - name: Disabling Swap on all nodes
      register: disable_swap
      changed_when: disable_swap != 0
      shell: swapoff -a

    - name: Commenting Swap entries in /etc/fstab
      replace:
        path: /etc/fstab
        regexp: "(^.*swap.*)"
        replace: '# \1'

    - name: Disable password SSH access
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: "PasswordAuthentication .*"
        line: "PasswordAuthentication no"
        state: present

    - name: Set hostname
      hostname:
        name: "{{ hostname }}"

    - name: Add myself to /etc/hosts
      lineinfile:
        dest: /etc/hosts
        regexp: '^127\.0\.0\.1[ \t]+localhost'
        line: "127.0.0.1 localhost {{ hostname }}"
        state: present

    - name: Free port 53
      lineinfile:
        dest: /etc/systemd/resolved.conf
        regexp: "#DNSStubListener=yes"
        line: "DNSStubListener=no"
        state: present

    - name: Free port 53
      lineinfile:
        dest: /etc/systemd/resolved.conf
        regexp: "DNS=.*"
        line: "DNS=8.8.8.8"
        state: present

    - name: Free port 53
      shell: ln -sf /run/systemd/resolve/resolv.conf /etc/resolv.conf
      changed_when: false

    - name: Copy forward ipv4 script
      copy:
        src: "{{ playbook_dir }}/../../src/forward-ipv4.sh"
        dest: /tmp/forward-ipv4.sh
        mode: 0777

    - name: Forward IP4v4
      shell: . /tmp/forward-ipv4.sh

    # - name: Configure NetworkManager for calico
    #   copy:
    #     src: "{{ playbook_dir }}/../../src/calico.conf"
    #     dest: /etc/NetworkManager/conf.d/calico.conf
    #     mode: 0777

    - name: Reboot all the kubernetes nodes
      reboot:
        post_reboot_delay: 10
        reboot_timeout: 90
        connect_timeout: 60
        test_command: uptime

    - name: Installing prerequisite packages
      apt:
        update_cache: true
        name:
          - apt-transport-https
          - bindfs
          - ca-certificates
          - curl
          - gnupg-agent
          - gnupg
          - gnupg2
          - nfs-common
          - software-properties-common
          - qemu-guest-agent
        state: present

    - name: Installing yq
      shell: wget https://github.com/mikefarah/yq/releases/download/v4.6.3/yq_linux_amd64 -O /usr/bin/yq && chmod +x /usr/bin/yq

    - name: Add helm official GPG key
      apt_key:
        url: https://baltocdn.com/helm/signing.asc
        keyring: /usr/share/keyrings/helm.gpg
        state: present

    - name: Add k8s GPG key
      apt_key:
        url: https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key
        keyring: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
        state: present

    - name: Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        keyring: /etc/apt/keyrings/docker.gpg
        state: present

    - name: Add Helm Repository
      apt_repository:
        repo: deb [arch=amd64 signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main
        state: present
        filename: helm
        mode: "0600"

    - name: Add Kubernetes Repository
      apt_repository:
        repo: deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /
        state: present
        filename: kubernetes
        mode: "0600"

    - name: Add Docker Repository
      apt_repository:
        repo: deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu jammy stable
        state: present
        filename: docker
        mode: "0600"

    - name: Install helm, container runtime
      apt:
        update_cache: true
        name:
          - helm
          - containerd.io
        state: present

    - name: Install runc
      shell: |
        wget https://github.com/opencontainers/runc/releases/download/v1.1.1/runc.amd64
        install -m 755 runc.amd64 /usr/local/sbin/runc

    - name: Configure containerd
      shell: |
        mkdir -p /etc/containerd/
        containerd config default | tee /etc/containerd/config.toml
        sudo sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml

    - name: Install cni backends
      shell: |
        mkdir -p /opt/cni/bin
        curl -O -L https://github.com/containernetworking/plugins/releases/download/v1.2.0/cni-plugins-linux-amd64-v1.2.0.tgz
        tar -C /opt/cni/bin -xzf cni-plugins-linux-amd64-v1.2.0.tgz

    - name: Enable service containerd, and enable persistently
      service:
        name: containerd
        enabled: true
        state: started

    - name: Restart containerd.
      command: "{{ item }}"
      become_user: root
      become_method: ansible.builtin.sudo
      become: yes
      with_items:
        - systemctl restart containerd

    - name: Install kubernetes packages
      apt:
        update_cache: true
        allow_downgrade: true
        name:
          - kubeadm=1.29.3-1.1
          - kubectl=1.29.3-1.1
          - kubelet=1.29.3-1.1
        state: present
    - name: Hold kubeadm
      ansible.builtin.dpkg_selections:
        name: kubeadm
        selection: hold
    - name: Hold kubelet
      ansible.builtin.dpkg_selections:
        name: kubelet
        selection: hold
    - name: Hold kubectl
      ansible.builtin.dpkg_selections:
        name: kubectl
        selection: hold

    - name: Add IPs to /etc/hosts on master and workers
      lineinfile:
        dest: /etc/hosts
        regexp: ".*{{ item }}$"
        line: "{{ hostvars[item].ansible_host }} {{ item }}"
        state: present
      when: hostvars[item].ansible_host is defined
      with_items: "{{ groups.all }}"

    - name: Enable service kubelet, and enable persistently
      service:
        name: kubelet
        enabled: true
        state: started

    - name: Reboot all the kubernetes nodes
      reboot:
        post_reboot_delay: 10
        reboot_timeout: 90
        connect_timeout: 60
        test_command: uptime
