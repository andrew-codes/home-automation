---
- hosts: all
  become: yes
  become_method: sudo
  become_user: root
  gather_facts: yes
  connection: ssh
  vars_files:
    - .secrets/ansible-secrets.yml

  tasks:
    - name: Disabling Swap on all nodes
      shell: swapoff -a

    - name: Commenting Swap entries in /etc/fstab
      replace:
        path: /etc/fstab
        regexp: "(^/.*swap*)"
        replace: '# \1'

    - name: Set hostname
      hostname:
        name: "{{ hostname }}"

    - name: Add myself to /etc/hosts
      lineinfile:
        dest: /etc/hosts
        regexp: '^127\.0\.0\.1[ \t]+localhost'
        line: "127.0.0.1 localhost {{ hostname }}"
        state: present

    - name: Update apt
      become_user: root
      become_method: sudo
      become: yes
      shell: apt-get update --allow-releaseinfo-change

    - name: Installing Prerequisites
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg-agent
          - gnupg
          - software-properties-common
          - qemu-guest-agent
        state: present

    - name: Installing yq
      shell: wget https://github.com/mikefarah/yq/releases/download/v4.6.3/yq_linux_amd64 -O /usr/bin/yq && chmod +x /usr/bin/yq

    - name: Add Dockerâ€™s official GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable
        state: present
        filename: docker
        mode: 0600

    - name: Install Docker Engine
      apt:
        name:
          - docker.io
        state: present

    - name: Enable service docker, and enable persistently
      service:
        name: docker
        enabled: yes

    - name: Setup docker daemon config.
      shell: 'echo ''{ "features": { "buildkit": true }, "exec-opts": ["native.cgroupdriver=systemd"], "insecure-registries": ["docker-registry:5000"], "log-driver": "json-file", "log-opts": {"max-size": "10m", "max-file": "3"}, "default-shm-size": "256M" }'' > /etc/docker/daemon.json'

    - name: Restart docker.
      command: "{{ item }}"
      become_user: root
      become_method: sudo
      become: yes
      with_items:
        - systemctl daemon-reload
        - systemctl restart docker

    - name: Add IPs to /etc/hosts on master and workers
      lineinfile:
        dest: /etc/hosts
        regexp: ".*{{ item }}$"
        line: "{{ hostvars[item].ansible_host }} {{item}}"
        state: present
      when: hostvars[item].ansible_host is defined
      with_items: "{{ groups.all }}"

    # - name: Add Google official GPG key
    #   apt_key:
    #     url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    #     state: present

    # - name: Add Kubernetes Repository
    #   apt_repository:
    #     repo: deb http://apt.kubernetes.io/ kubernetes-xenial main
    #     state: present
    #     filename: kubernetes
    #     mode: 0600

    - name: Installing Kubernetes Cluster Packages
      apt:
        name:
          - kubeadm
          - kubectl
          - kubelet
        state: present

    - name: Enable service kubelet, and enable persistently
      service:
        name: kubelet
        enabled: yes

    - name: "Set resolution of docker-registry in /etc/hosts"
      lineinfile:
        path: /etc/hosts
        line: "{{ docker_ip }} docker-registry"
        create: yes

    # - name: Reboot all the kubernetes nodes.
    #   reboot:
    #     post_reboot_delay: 10
    #     reboot_timeout: 90
    #     connect_timeout: 60
    #     test_command: uptime

- hosts: main
  become: yes
  become_method: sudo
  become_user: root
  gather_facts: yes
  connection: ssh
  vars_files:
    - .secrets/ansible-secrets.yml

  tasks:
    - name: Remove networking CNI config
      shell: rm -rf /etc/cni/net.d/*

    - name: Reset cluster
      command: kubeadm reset --force

    - name: Initializing Kubernetes Cluster
      command: "{{ item }}"
      with_items:
        - kubeadm init --pod-network-cidr="{{ pod_network_cidr }}" --apiserver-advertise-address="{{ ansible_default_ipv4.address }}"
      run_once: true
      delegate_to: "{{ ansible_default_ipv4.address }}"

    - name: Create directory for kube config.
      become_user: hl
      become_method: sudo
      become: yes
      file:
        path: /home/{{ ansible_user }}/.kube
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0755

    - name: Copy /etc/kubernetes/admin.conf to user's home directory /home/{{ ansible_user }}/.kube/config.
      become_user: root
      become_method: sudo
      become: yes
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/{{ ansible_user }}/.kube/config
        remote_src: yes
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0600

    - pause: seconds=10

    - name: Remove the cache directory.
      become_user: hl
      become_method: sudo
      become: yes
      file:
        path: /home/{{ ansible_user }}/.kube/cache
        state: absent

    - name: Copy flannel setup
      copy:
        src: ./src/flannel.yml
        dest: /home/{{ ansible_user }}/flannel.yml
        owner: root
        mode: 0644

    - name: Copy flannel network config
      copy:
        src: ./src/flannel-network-config.yml
        dest: /home/{{ ansible_user }}/flannel-network-config.yml
        owner: root
        mode: 0644

    - name: Copy flannel network config value
      copy:
        src: ./.secrets/flannel-pod-network-cidr.json
        dest: /home/{{ ansible_user }}/flannel-pod-network-cidr.json
        owner: root
        mode: 0644

    - name: Update flannel network config
      shell: NET_JSON=$(cat /home/{{ ansible_user }}/flannel-pod-network-cidr.json) yq eval -i '.data."net-conf.json" =strenv(NET_JSON)' /home/{{ ansible_user }}/flannel-network-config.yml

    - name: Create Pod Network & RBAC.
      become_user: hl
      become_method: sudo
      become: yes
      command: "{{ item }}"
      with_items:
        - kubectl apply -f /home/{{ ansible_user }}/flannel-network-config.yml
        - kubectl apply -f /home/{{ ansible_user }}/flannel.yml

    - pause: seconds=30

    - name: Get the token for joining the nodes with Kuberentes master.
      shell: kubeadm token create  --print-join-command
      register: kubernetes_join_command

    - debug:
        msg: "{{ kubernetes_join_command.stdout }}"

    - name: Copy join command to local file.
      become: no
      local_action: copy content="{{ kubernetes_join_command.stdout_lines[0] }}" dest="{{ playbook_dir }}/kubernetes_join_command" mode=0777

- hosts: workers
  remote_user: root
  become: yes
  become_method: sudo
  become_user: root
  gather_facts: yes
  connection: ssh

  tasks:
    - name: Copy join command to worker nodes.
      become: yes
      become_method: sudo
      become_user: root
      copy:
        src: "{{ playbook_dir }}/kubernetes_join_command"
        dest: /tmp/kubernetes_join_command
        mode: 0777

    - name: Join the Worker nodes with the master.
      become: yes
      become_method: sudo
      become_user: root
      command: sh /tmp/kubernetes_join_command
      register: joined_or_not

    - debug:
        msg: "{{ joined_or_not.stdout }}"

- hosts: main
  become: yes
  become_method: sudo
  become_user: hl
  gather_facts: yes
  connection: ssh

  tasks:
    - name: Fetch kubeconfig to repo secrets
      become_user: hl
      become_method: sudo
      become: yes
      fetch:
        dest: .secrets/.kube/config
        flat: yes
        src: /home/{{ ansible_user }}/.kube/config

    - name: Allow pods on main node
      become_user: hl
      become_method: sudo
      become: yes
      shell: kubectl taint nodes --all node-role.kubernetes.io/master-
