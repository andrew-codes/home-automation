---
- hosts: all
  gather_facts: yes
  connection: winrm
  vars_files:
    - ../.secrets/ansible-secrets.yml

  tasks:
    # - name: Create local user
    #   win_user:
    #     name: "{{ gaming_room_gaming_pc_username }}"
    #     update_password: on_create
    #     password_never_expires: yes

    # - name: Ensure Steam is installed
    #   win_chocolatey:
    #     name: steam
    #     state: present

    # - name: Ensure Epic is installed
    #   win_chocolatey:
    #     name: epicgameslauncher
    #     state: present

    # - name: Remove GOG
    #   win_chocolatey:
    #     name: goggalaxy
    #     state: absent

    # - name: Ensure Playnite is installed
    #   win_chocolatey:
    #     name: playnite
    #     state: present

    # - name: Ensure Uplay is installed
    #   win_chocolatey:
    #     name: uplay
    #     state: present

    # - name: Ensure nuget is installed
    #   win_chocolatey:
    #     name: nuget.commandline
    #     state: present

    # - name: Ensure node is installed
    #   win_chocolatey:
    #     name: nodejs
    #     state: present

    # - name: Ensure yarn is installed
    #   win_chocolatey:
    #     name: yarn
    #     state: present

    # - name: Ensure 1password is installed
    #   win_chocolatey:
    #     name: 1password
    #     state: present

    # - name: Ensure Git is installed
    #   win_chocolatey:
    #     name: git
    #     package_params: /GitAndUnixToolsOnPath /NoShellIntegration
    #     state: present

    # - name: Playnite supported dotnet version is installed
    #   win_chocolatey:
    #     name: netfx-4.6.2-devpack
    #     state: present

    # - name: Ensure vscode
    #   win_chocolatey:
    #     name: vscode
    #     state: present

    # - name: Ensure Visual Studio is installed
    #   win_chocolatey:
    #     name: visualstudio2022community
    #     state: present

    # - name: Install the Win32-OpenSSH service
    #   win_chocolatey:
    #     name: openssh
    #     package_params: /SSHServerFeature /AlsoLogToFile
    #     state: present

    - name: Enable HA Ping through firewall
      win_firewall_rule:
        name: "HA Ping"
        description: "Allow ping from Home Assistant"
        direction: In
        protocol: icmpv4
        icmp_type_code:
          - "8:*"
        profiles: private
        action: Allow
        enabled: yes
        state: present

    - name: Remove old .ssh directory
      win_shell: |
        Remove-Item -Path "C:\Users\{{ user }}\.ssh" -Force -Recurse
      vars:
        ansible_become_user: "{{ ansible_user }}"
        ansible_become_password: "{{ ansible_password }}"

    - name: Create .ssh directory
      win_shell: |
        New-Item -Force -Path "C:\Users\{{ user }}\.ssh" -ItemType Directory
      vars:
        ansible_become_user: "{{ ansible_user }}"
        ansible_become_password: "{{ ansible_password }}"

    - name: Copy authorized_keys
      ansible.windows.win_copy:
        src: ../.secrets/authorized_keys
        dest: C:\Users\{{ user }}\.ssh\authorized_keys
      vars:
        ansible_become_user: "{{ ansible_user }}"
        ansible_become_password: "{{ ansible_password }}"
        ansible_remote_tmp: 'C:\tmp'

    - name: Copy sshd_config
      ansible.windows.win_copy:
        src: ../src/sshd_config
        dest: C:\ProgramData\ssh\sshd_config
      vars:
        ansible_become_user: BUILTIN\Administrators
        ansible_become_password: "{{ ansible_password }}"
        ansible_remote_tmp: 'C:\tmp'

    - name: Restart SSH Service
      win_shell: |
        Get-Service -Name sshd | Restart-Service

    - name: Dev tools
      win_shell: |
        New-Item -Force -Path "C:\Users\{{ user }}\developer\repos" -ItemType Directory
        cd "C:\Users\{{ user }}\developer\repos"
        git config --global http.sslVerify "false"
        $installed=$(Test-Path devtools -PathType Any)
        try {
          git clone https://github.com/andrew-codes/devtools.git
        }
        catch { }
        cd devtools
        git fetch --all
        git reset --hard origin/main

        if (-not($installed))
        {
          bash.exe -c "source install.win.sh"
        }
      vars:
        ansible_become_user: "{{ user }}"
        ansible_become_password: "{{ ansible_password }}"

    - name: Clone and update Home Automation Repo
      win_shell: |
        cd "C:\Users\{{ user }}\developer\repos"
        try {
          git clone https://github.com/andrew-codes/home-automation.git
        }
        catch { }
        cd home-automation
        git fetch --all
      vars:
        ansible_become_user: "{{ user }}"
        ansible_become_password: "{{ ansible_password }}"

    - name: Prepare repo
      win_shell: |
        cd "C:\Users\{{ user }}\developer\repos\home-automation"
        yarn
      vars:
        ansible_become_user: "{{ user }}"
        ansible_become_password: "{{ ansible_password }}"

    - name: Clone Nvidia driver updater PS script
      win_shell: |
        cd "C:\Users\{{ user }}\developer\repos"
        try {
          git clone https://github.com/lord-carlos/nvidia-update.git
        }
        catch { }
