---
- hosts: all
  gather_facts: yes
  become_method: ansible.builtin.sudo
  become_user: root
  become: false
  connection: ssh
  remote_user: "{{ ansibleUser }}"

  tasks:
    - name: Ensure Homebrew is installed
      command: /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      args:
        creates: /usr/local/bin/brew

    - name: Install rsync using Homebrew
      homebrew:
        name: rsync
        state: present
      become: false

    - name: Install terminal-notifier using Homebrew
      homebrew:
        name: terminal-notifier
        state: present
      become: false

    - name: Ensure user bin directory
      file:
        path: /Users/{{ ansibleUser }}/bin
        state: directory
        mode: 0755

    - name: Install lock watcher
      shell: |
        curl --fail-with-body -L -O https://github.com/coolaj86/run-on-macos-screen-unlock/releases/download/v1.0.1/run-on-macos-screen-unlock-v1.0.1.tar.gz
        tar xvf ./run-on-macos-screen-unlock-v1.0.1.tar.gz
        xattr -r -d com.apple.quarantine ./run-on-macos-screen-unlock
        mv ./run-on-macos-screen-unlock ~/bin/
        rm -rf ./run-on-macos-screen-unlock-v1.0.1.tar.gz
        rm -rf run-on-macos-screen-unlock

    - name: Stop Backup.app if it is running
      shell: |
        if pgrep -f "/Users/{{ ansibleUser }}/Applications/Backup.app"; then
          pkill -f "/Users/{{ ansibleUser }}/Applications/Backup.app"
        fi
      ignore_errors: true

    - name: Ensure Library launch agents directory exists
      file:
        path: /Users/{{ ansibleUser }}/Library/LaunchAgents
        state: directory

    - name: Unload launchctl definitions
      shell: |
        launchctl unload /Users/{{ ansibleUser }}/Library/LaunchAgents/com.user.backup.plist
        launchctl unload /Users/{{ ansibleUser }}/Library/LaunchAgents/com.user.backup.onwake.plist
      ignore_errors: true

    - name: Ensure user applications directory exists
      file:
        path: /Users/{{ ansibleUser }}/Applications
        state: directory
        mode: 0755
        owner: "{{ ansibleUser }}"

    - name: Ensure user app does not exist in system directory
      file:
        path: /Users/{{ ansibleUser }}/Applications/Backup.app
        state: absent

    - name: Install Backup user application
      copy:
        src: "{{ playbook_dir }}/../../._packaged/{{ ansible_host }}/{{ ansibleUser }}/Backup.app"
        dest: /Users/{{ ansibleUser }}/Applications
        remote_src: false
        mode: preserve
      become: false

    - name: Copy launchctl definition
      copy:
        src: "{{ playbook_dir }}/../../._packaged/{{ ansible_host}}/{{ ansibleUser }}/com.user.backup.plist"
        dest: /Users/{{ ansibleUser }}/Library/LaunchAgents/com.user.backup.plist
        mode: 0700

    - name: Copy launchctl definition for on wake
      copy:
        src: "{{ playbook_dir }}/../../._packaged/{{ ansible_host}}/{{ ansibleUser }}/com.user.backup.onwake.plist"
        dest: /Users/{{ ansibleUser }}/Library/LaunchAgents/com.user.backup.onwake.plist
        mode: 0700

    - name: Notify user to grant full disk access to Terminal
      debug:
        msg: >
          Please grant Full Disk Access as well as access to other directories to the Backup application in
          System Preferences > Security & Privacy > Privacy.

    - name: Load launchctl definitions
      shell: |
        launchctl load /Users/{{ ansibleUser }}/Library/LaunchAgents/com.user.backup.plist
        launchctl load /Users/{{ ansibleUser }}/Library/LaunchAgents/com.user.backup.onwake.plist

    - name: Start first backup
      shell: |
        launchctl start com.user.backup
        launchctl start com.user.backup.onwake
      ignore_errors: true
